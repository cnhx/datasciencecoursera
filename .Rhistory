# Load packages
library(tidyverse)
library(httr)
library(jsonlite)
#Save appid
appid <- 570
#Base URL
url_steam <- 'https://store.steampowered.com/appreviews/'
#Construct API Request
repos <- GET(url = paste0(url_steam,'/',appid,'?json=1?offset'))
#Exmain response components
names(repos)
#Check Status, only 200 is fine
status_code(repos)
#Get Content from Repo
repo_content <- content(repos)
#repo_df <- lapply(repo_content, function(x){
#  df <- data.frame(
#   recommendationID = x$reviews$reviewsrecommendationid,
#  authorID = x$reviews$author$steamid,
# language = x$reviews$language,
#review = x$reviews$review
#)
#})
dfrepo <- as.data.frame(repo_content)
repo_reviews <- repo_content$reviews
repo_reviews <-as.data.frame(repo_reviews)
dfsteamrepo <-list()
while(TRUE){
num = 20
steamrepo <-repos <- GET(url = paste0(url_steam,'/',appid,'?json=1?offset=',num))
print("Offset now is ", num)
if(status_code(steamrepo)==200){
steamrepo_content<-content(steamrepo)
dfsteamrepo <- c(dfsteamrepo,steamrepo_content$reviews)
num <- num + 20
}else{
break
}
}
View(dfsteamrepo)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
data("iris")
data(iris)
?iris
head(iros)
head(iris)
class(iris)
tapply(iris,3,mean)
iris[Species == "virginica", round(mean("Sepal.Length"))]
iris_dt = as.data.frame.table(iris)
iris[Species == "virginica", round(mean("Sepal.Length"))]
iris_dt[Species == "virginica", round(mean("Sepal.Length"))]
head(iris_dt)
class(iris)
head(iris)
iris[[3]]
iris$Sepal.Length
subset(iris,select = Sepal.Length, subset(Species == "virginica"))
subset(iris,select = Sepal.Length, subset(Species == "virginica"))
columns(iris)
iris
head(iris)
subset(iris,select = Sepal.Length, subset(Species ="virginica"))
subset(iris,select = Sepal.Length, subset=(Species =="virginica"))
mean(subset(iris,select = Sepal.Length, subset=(Species =="virginica")))
summary(subset(iris,select = Sepal.Length, subset=(Species =="virginica")))
head(iris)
apply(iris[,1:4],2,mean)
iris[,1:4]
rowMeans(iris[,1:$])
rowMeans(iris[,1:4])
colMeans((iris[,1:4]))
data(mtcars)
head(mtcars)
class(mtcars)
?with
with
with(mtcars,tapply(mpg,cyl,mean))
tapply(mpg,cly,mean)
tapply(mtcars,mtcars$cyl,mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
abs(mean(split(mtcars, mtcars$cyl)$'4'$hp) - mean(split(mtcars, mtcars$cyl)$'8'$hp))
mean(split(mtcars,mtcars$cyl)$'4'$hp))
mean(split(mtcars, mtcars$cyl)$'4'$hp)
mean(split(mtcars, mtcars$cyl)$'8'$hp)
split(mtcars, mtcars$cyl)
debug(ls)
ls
round(6.588)
round(6.588)
round(6.588)
round(126.5779)
setwd("~/Gits/datasciencecoursera")
